/**
 * @file kernel.ld
 * @desc simple linker script for the kernel; see the GNU ld 'info' 
 *       manual ("info ld") to learn the syntax. 
 */
OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")
OUTPUT_ARCH(i386)
ENTRY(_start)

SECTIONS
{
  /* load the kernel at this address: "." means the current address */
  . = 0xF0100000;

  .text : {
    *(.text .stub .text.* .gnu.linkonce.t.*)
  }

  PROVIDE(etext = .); /* define the 'etext' symbol to this value */

  .rodata : {
    *(.rodata .rodata.* .gnu.linkonce.r.*)
  }

  /* include debugging information in kernel memory */
  .stab : {
    PROVIDE(__STAB_BEGIN__ = .);
    *(.stab);
    PROVIDE(__STAB_END__ = .);
    BYTE(0)   /* force the linker to allocate space for this section */
  }

  .stabstr : {
    PROVIDE(__STABSTR_BEGIN__ = .);
    *(.stabstr);
    PROVIDE(__STABSTR_END__ = .);
    BYTE(0)   /* force the linker to allocate space for this section */
  }

  /* adjust the address for the data segment to the next page */
  . = ALIGN(0x1000);

  /* the data segment */
  .data : {
    *(.data)
  }

  PROVIDE(edata = .);

  .bss : {
    *(.bss)
  }

  PROVIDE(end = .);

  /DISCARD/ : {
    *(.eh_frame .note.GNU-stack)
  }
}
